<?xml version = "1.0" encoding="UTF-8" standalone="yes"?>
<VFPData>
	<record>
		<platform>COMMENT</platform>
		<uniqueid>Class</uniqueid>
		<timestamp>0</timestamp>
		<class/>
		<classloc/>
		<baseclass/>
		<objname/>
		<parent/>
		<properties/>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1>VERSION =   3.00</reserved1>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1O90O62TJ</uniqueid>
		<timestamp>1025399639</timestamp>
		<class>custom</class>
		<classloc/>
		<baseclass>custom</baseclass>
		<objname>orden</objname>
		<parent/>
		<properties>Height = 17
Width = 52
numorden =  
numproy =  
numcont =  
creada = {}
cita = {}
terminada = {}
cerrada = {}
numuser =  
asesor1 =  
asesor2 =  
asesor3 =  
prioridad = 0
calif = 0
avance = 0
reabierta = 0
hrsserv = 0
cantserv = 0
factura =  
importe = 0
hrsestim = 0
ingestim = 0
problema =  
equiporec =  
causas =  
pendpor =  
tipo =  
cerror =  
nerror = 0
Name = "orden"
</properties>
		<protected/>
		<methods>PROCEDURE Init
*
* Init
*
* Abre la base de datos con otro alias

If Select('_Ordenes') == 0
	Use Ordenes Alias _Ordenes Order NumOrden In 0 Again
EndIf

ENDPROC
PROCEDURE agregar
*
* Agregar
*
* Agrega una nueva orden
*
With This
	Select _Ordenes
	If Bloquea('_Ordenes')
		Go Bott
		.NumOrden = Padl(Allt(SigDoc(NUMORDEN)),10)	
		Append Blank
		Replace	NUMORDEN	With	.NumOrden,;
				NUMPROY		With	.NumProy,;
				NUMCONT		With	.NumCont,;			
				CREADA		With	.Creada,;
				CITA		With	.Cita,;
				NUMUSER		With	.NumUser,;
				PRIORIDAD	With	.Prioridad,;
				PROBLEMA	With	.Problema,;
				EQUIPOREC	With	.EquipoRec,;
				TIPO		With	.Tipo,;
				HRSESTIM	with	.HrsEstim
	Endif
	Use
	Use Ordenes Alias _Ordenes Order NumOrden In 0 Again
EndWith

ENDPROC
PROCEDURE cerrar
*
* Cerrar
*
* Cierra la orden
*

With This
	If .Calif == 0
		.cError = 'No se pueden omitir la calificacion'
		.nError = 7
		Return .F.
	EndIf
	
	Select _Ordenes
	=Seek(.NumOrden)
	
	Replace	CALIF		With	.Calif,;
			CERRADA		With	.Cerrada
			
	* Abrir la base de datos con otro alias
	Use
	Use Ordenes Alias _Ordenes Order NumOrden In 0 Again

EndWith

ENDPROC
PROCEDURE modificar
*
* Modificar
*
* Modifica la orden
*

With This
	Select _Ordenes
	=Seek(.NumOrden)	
	Replace	NUMPROY		With	.NumProy,;
			NUMCONT		With	.NumCont,;
			CREADA		With	.Creada,;
			CITA		With	.Cita,;
			TERMINADA	With	.Terminada,;
			CERRADA		With	.Cerrada,;
			NUMUSER		With	.NumUser,;
			PRIORIDAD	With	.Prioridad,;
			CALIF		With	.Calif,;
			AVANCE		With	.Avance,;
			FACTURA		With	.Factura,;
			IMPORTE		With	.Importe,;
			HRSESTIM	With	.HrsEstim,;
			INGESTIM	With	.IngEstim,;
			PROBLEMA	With	.Problema,;
			EQUIPOREC	With	.EquipoRec,;
			CAUSAS		With	.Causas,;
			PENDPOR		With	.PendPor,;
			TIPO		With	.Tipo
			
	* Abrir la base de datos con otro alias
	Use
	Use Ordenes Alias _Ordenes Order NumOrden In 0 Again

EndWith

ENDPROC
PROCEDURE reabrir
*
* Reabrir
*
* Reabrir una orden cerrada
*

With This
	Select _Ordenes
	=Seek(.NumOrden)
	
	Replace	TERMINADA	With	{},;
			CERRADA		With	{},;
			AVANCE		With	90,;
			REABIERTA	With	REABIERTA+1
			
	* Abrir la base de datos con otro alias
	Use
	Use Ordenes Alias _Ordenes Order NumOrden In 0 Again

EndWith

ENDPROC
PROCEDURE recalcularhorastotales
*
* RecalcularHorasTotales
*
* Recalcula el total de horas invertidas en la orden
*

With This
	
	* Obtener las actividades de la orden
	If Not SqlMsl('Temp','Select Crm.* ' +;
		'From Crm '+;
		'Where '+;
		'Crm.ACTIVIDAD And '+;
		'Crm.NUMORDEN == m.Val1',;
		.NumOrden)
Return
	EndIf
	
	* Inicializar la variable que almacena el total de horas invertidas en la orden
	nHrsServ = 0
	
	* Recorre el temporal con las actividades de la orden
	Select Temp
	Scan
				
		* Almacena el total de horas invertidas en la orden
		nHrsServ = nHrsServ + (Temp.FECHAFIN-Temp.FECHA)/3600
		
	EndScan
	
	* Almacena en una variable el numero de servicios de la orden
	nCantServ = Reccount('Temp')
	
	* Borra el temporal
	DelAlias('Temp')
	
	Select _Ordenes
	=Seek(.NumOrden)
	
	Replace	HRSSERV		With	nHrsServ,;
			CANTSERV	With	nCantServ
			
	* Abrir la base de datos con otro alias
	Use
	Use Ordenes Alias _Ordenes Order NumOrden In 0 Again

EndWith

ENDPROC
PROCEDURE serviciorealizado
*
* ServicioRealizado
*
* Actualiza la informacion de la orden segun el servicio realizado
*

With This
	Select _Ordenes
	=Seek(.NumOrden)
	
	Replace	TERMINADA	With	{},;
			AVANCE		With	.Avance,;
			HRSSERV		With	HRSSERV+.HrsServ,;
			CANTSERV	With	.CantServ,;
			CAUSAS		With	.Causas,;
			PENDPOR		With	.PendPor
			
	* Abrir la base de datos con otro alias
	Use
	Use Ordenes Alias _Ordenes Order NumOrden In 0 Again

EndWith

ENDPROC
PROCEDURE validagregar
*
* ValidAgregar
*
* Validar la orden a agregar

With This

	* No omitir la prioridad
	If Empty(.Prioridad)
		.cError = 'No se puede omitir la prioridad'
		.nError = 1
		Return .F.
	EndIf
		
	* No omitir el usuario
	If Empty(.NumUser)
		.cError = 'No se puede omitir el usuario'
		.nError = 2
		Return .F.
	EndIf

*!*		* No omitir el tipo de la actividad
*!*		If Empty(.Tipo)
*!*			.cError = 'No se puede el tipo de actividad'
*!*			.nError = 3
*!*			Return .F.
*!*		EndIf
	
	* No omitir la descripcion del problema
	If Empty(.Problema)
		.cError = 'No se puede omitir el problema a resolver'
		.nError = 4
		Return .F.
	EndIf
	
EndWith

ENDPROC
PROCEDURE validservterminado
*
* ValidServTerminado
*
* Validar si el servicio fue terminado y que no se omita el avance y las causas
* por las que esta pendiente

With This
	* No voy a validar nada
	Return .t.
	
	* No esta terminado
	If Empty(.Terminada)
		* No omitir el avance
		If Empty(.Avance)
			.cError = 'No se pueden omitir el avance'
			.nError = 5
			Return .F.
		EndIf
		
		* No omitir las causas por las que queda pendiente el servicio
		If Empty(.PendPor)
			.cError = 'No se pueden las causas por las que se queda pendiente'
			.nError = 6
			Return .F.
		EndIf
	EndIf
	
EndWith

ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1>Class</reserved1>
		<reserved2>1</reserved2>
		<reserved3>numorden
numproy
numcont
creada
cita
terminada
cerrada
numuser
asesor1
asesor2
asesor3
prioridad
calif
avance
reabierta
hrsserv
cantserv
factura
importe
hrsestim
ingestim
problema
equiporec
causas
pendpor
tipo
cerror
nerror
*validagregar 
*agregar 
*modificar 
*serviciorealizado 
*validservterminado 
*cerrar 
*reabrir 
*recalcularhorastotales 
</reserved3>
		<reserved4/>
		<reserved5/>
		<reserved6>Pixels</reserved6>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>COMMENT</platform>
		<uniqueid>RESERVED</uniqueid>
		<timestamp>0</timestamp>
		<class/>
		<classloc/>
		<baseclass/>
		<objname>orden</objname>
		<parent/>
		<properties/>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
</VFPData>
